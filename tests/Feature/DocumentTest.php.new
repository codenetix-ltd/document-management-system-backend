<?php

namespace Tests\Feature;

use App\Entities\Document;
use App\Http\Resources\DocumentCollectionResource;
use App\Http\Resources\DocumentResource;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Resources\Json\Resource;
use Tests\TestCase;

/**
 * Created by Codenetix team <support@codenetix.com>
 */
class DocumentTest extends TestCase
{
    use RefreshDatabase;

    /**
     * Setup the test environment.
     *
     * @return void
     */
    protected function setUp()
    {
        parent::setUp();
        Resource::withoutWrapping();
    }

    /**
     * Tests document list endpoint
     *
     * @return void
     */
    public function testDocumentList()
    {
        $documents = factory(Document::class, 10)->create();

        $response = $this->json('GET', '/api/documents');

        $response
            ->assertStatus(200)
            ->assertJson((new DocumentCollectionResource($documents))->resolve());
    }

    /**
     * Tests $document get endpoint
     *
     * @return void
     */
    public function testDocumentGet()
    {
        $documents = factory(Document::class, 10)->create();

        $response = $this->json('GET', '/api/documents/' . $documents[0]->id);

        $response
            ->assertStatus(200)
            ->assertJson((new DocumentResource($documents[0]))->resolve());
    }

    /**
     * Tests document store endpoint
     *
     * @return void
     */
    public function testDocumentStore()
    {
        $document = factory(Document::class)->make();

        $response = $this->json('POST', '/api/documents', $document->toArray());

        $document = Document::first();

        $response
            ->assertStatus(201)
            ->assertJson((new DocumentResource($document))->resolve());
    }

    /**
     * Tests document update endpoint
     *
     * @return void
     */
    public function testDocumentUpdate()
    {
        $document = factory(Document::class)->create();

        $response = $this->json('PUT', '/api/documents/' . $document->id, array_only($document->toArray(), $document->getFillable()));

        $response
            ->assertStatus(200)
            ->assertJson((new DocumentResource($document))->resolve());
    }

    /**
     * Tests document delete endpoint
     *
     * @return void
     */
    public function testDocumentDelete()
    {
        $document = factory(Document::class)->create();

        $response = $this->json('DELETE', '/api/documents/' . $document->id);

        $response
            ->assertStatus(204);
    }

}
